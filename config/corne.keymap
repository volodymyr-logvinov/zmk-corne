/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

// #include <keys_ua.h>

/ {
    combos {
        compatible = "zmk,combos";

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <10 9>;
        };

        left_bracket {
            bindings = <&kp LBKT>;
            key-positions = <8 9>;
        };

        back_slash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 22>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 4>;
            layers = <0>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <15 16>;
        };

        right_shift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <34 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR|     |     |     |     |     |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT | BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3     &kp N4     &kp N5       &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&trans     &trans  &trans  &trans     &trans     &trans       &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT  &trans  &trans  &kp LG(C)  &kp LG(V)  &trans       &trans    &trans    &trans    &trans     &trans  &bt BT_CLR
                           &kp LGUI   &trans     &kp SPACE    &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        thin_layer {
            bindings = <
&trans  &tog 1        &tog 2        &tog 3        &tog 4    &trans    &kp C_VOL_UP  &kp C_PREV        &kp C_BRI_UP  &trans  &trans  &kp C_PWR
&trans  &trans        &trans        &trans        &kp CAPS  &tog 0    &kp C_VOL_DN  &kp C_PLAY_PAUSE  &kp PSCRN     &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &tog 4    &kp C_MUTE    &kp C_NEXT        &kp C_BRI_DN  &trans  &trans  &trans
                                    &trans        &trans    &trans    &trans        &trans            &trans
            >;
        };

        numpad {
            bindings = <
&trans          &trans  &trans  &trans        &trans  &trans       &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS  &kp SLASH
&trans          &trans  &trans  &trans        &trans  &trans       &trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp PLUS   &kp ASTERISK
&kp LEFT_SHIFT  &trans  &trans  &trans        &trans  &trans       &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp DOT    &trans
                                &kp LEFT_GUI  &mo 1   &kt SPACE    &kt RET          &mo 2            &kp RALT
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
